
EDC_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065e  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000583  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_16>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <set_duty>:
*/
int mode=1;

void set_duty(uint8_t duty)
{
		if(mode=1) {OCR0=duty;OCR2=0;}
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
  8a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
  8e:	8c bf       	out	0x3c, r24	; 60
  90:	13 bc       	out	0x23, r1	; 35
  92:	08 95       	ret

00000094 <init_ADC>:
	
}

void init_ADC()
{
	ADMUX|=1<<REFS0|1<<ADLAR;
  94:	87 b1       	in	r24, 0x07	; 7
  96:	80 66       	ori	r24, 0x60	; 96
  98:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADEN|1<<ADPS2|1<<ADATE;
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	84 6a       	ori	r24, 0xA4	; 164
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <init_PWM>:
}

void init_PWM()
{
	TCCR0|=1<<WGM00|1<<WGM01|1<<COM01|1<<CS02;
  a2:	83 b7       	in	r24, 0x33	; 51
  a4:	8c 66       	ori	r24, 0x6C	; 108
  a6:	83 bf       	out	0x33, r24	; 51
	OCR0=0;
  a8:	1c be       	out	0x3c, r1	; 60
	TCCR2|=1<<WGM21|1<<WGM20|1<<COM21|1<<CS22;
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	8c 66       	ori	r24, 0x6C	; 108
  ae:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
  b0:	13 bc       	out	0x23, r1	; 35
  b2:	08 95       	ret

000000b4 <init_SYS>:
}

void init_SYS()
{
	DDRD|=1<<PIND7;
  b4:	8f 9a       	sbi	0x11, 7	; 17
	DDRB|=1<<PINB3;
  b6:	bb 9a       	sbi	0x17, 3	; 23
	MCUCR|=1<<ISC11;
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bf       	out	0x35, r24	; 53
	GICR|=1<<INT0|1<<INT1;
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	8b bf       	out	0x3b, r24	; 59
	ADCSRA|=1<<ADSC;
  c4:	36 9a       	sbi	0x06, 6	; 6
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <main>:
	
}

int main()
{
	DDRB|=1<<PINB0;
  ca:	b8 9a       	sbi	0x17, 0	; 23
	DDRD|=1<<PIND3;
  cc:	8b 9a       	sbi	0x11, 3	; 17
	PORTD|=1<<PIND3;
  ce:	93 9a       	sbi	0x12, 3	; 18
	init_ADC();
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <init_ADC>
	init_PWM();
  d4:	0e 94 51 00 	call	0xa2	; 0xa2 <init_PWM>
	init_SYS();
  d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_SYS>
	
	while(1) {set_duty(ADCH<<2|ADCL>>6);ADCSRA|=1<<ADSC;}
  dc:	25 b1       	in	r18, 0x05	; 5
  de:	94 b1       	in	r25, 0x04	; 4
  e0:	22 0f       	add	r18, r18
  e2:	22 0f       	add	r18, r18
  e4:	89 2f       	mov	r24, r25
  e6:	82 95       	swap	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	83 70       	andi	r24, 0x03	; 3
  ee:	82 2b       	or	r24, r18
  f0:	0e 94 41 00 	call	0x82	; 0x82 <set_duty>
  f4:	36 9a       	sbi	0x06, 6	; 6
  f6:	f2 cf       	rjmp	.-28     	; 0xdc <main+0x12>

000000f8 <__vector_1>:
	return 0;
}
ISR(INT0_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
	OCR0=0;
 102:	1c be       	out	0x3c, r1	; 60
	OCR2=0;
 104:	13 bc       	out	0x23, r1	; 35
}
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_2>:

ISR(INT1_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	
	if(mode==0) mode=1;
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 122:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 126:	89 2b       	or	r24, r25
 128:	39 f4       	brne	.+14     	; 0x138 <__vector_2+0x28>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_2+0x30>
	else {mode=0; }
 138:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 13c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_16>:

ISR(ADC_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	//static int i=0;
	//uint8_t Result;
	//Result=((ADCL)|(ADCH<<8))*256/1024;
	//set_duty(Result);
	set_duty(ADCH<<2|ADCL>>6);
 170:	25 b1       	in	r18, 0x05	; 5
 172:	94 b1       	in	r25, 0x04	; 4
 174:	22 0f       	add	r18, r18
 176:	22 0f       	add	r18, r18
 178:	89 2f       	mov	r24, r25
 17a:	82 95       	swap	r24
 17c:	86 95       	lsr	r24
 17e:	86 95       	lsr	r24
 180:	83 70       	andi	r24, 0x03	; 3
 182:	82 2b       	or	r24, r18
 184:	0e 94 41 00 	call	0x82	; 0x82 <set_duty>
	//if((ADCH<<2|ADCL>>6)>512) PORTB|=1<<PINB0;
	ADCSRA|=1<<ADSC;
 188:	36 9a       	sbi	0x06, 6	; 6
	//if(i++>100) PORTB|=1<<PINB0;
	//PORTB&=~(1<<PINB0);
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
