
BoostConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000041c  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000389  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000211  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	11 d0       	rcall	.+34     	; 0x50 <main>
  2e:	67 c0       	rjmp	.+206    	; 0xfe <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <set_duty>:
uint8_t Duty;
uint16_t desired_value;

void set_duty()
{
	OCR0A=Duty;
  32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Duty>
  36:	86 bf       	out	0x36, r24	; 54
  38:	08 95       	ret

0000003a <init_pwm>:
void init_pwm(void)
{
	//Fast PWM mode Clear at OCR0A
	//PS=1
	//F=20MHz/256/PS
	TCCR0A|=1<<COM0A1||1<<WGM00||1<<WGM01;
  3a:	8f b5       	in	r24, 0x2f	; 47
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	8f bd       	out	0x2f, r24	; 47
	Duty=180;
  40:	84 eb       	ldi	r24, 0xB4	; 180
  42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Duty>
	set_duty();
  46:	f5 df       	rcall	.-22     	; 0x32 <set_duty>
  48:	08 95       	ret

0000004a <init_adc>:
}

void init_adc(void)
{
	ADMUX|=1<<REFS0||1<<ADLAR||1<<MUX1;
  4a:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA|=1<<ADEN||1<<ADIE||1<<ADPS2;
  4c:	30 9a       	sbi	0x06, 0	; 6
  4e:	08 95       	ret

00000050 <main>:
}
*/

int main(void)
{
	init_pwm();
  50:	f4 df       	rcall	.-24     	; 0x3a <init_pwm>
	init_adc();
  52:	fb df       	rcall	.-10     	; 0x4a <init_adc>
	//init_ext_interrupt();
	sei();
  54:	78 94       	sei
	//ADCSRA|=1<<ADSC; 
    /* Replace with your application code */
    while (1) 
    {
    }
  56:	ff cf       	rjmp	.-2      	; 0x56 <main+0x6>

00000058 <__vector_9>:
}

ISR(ADC_vect)
{
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	3f 93       	push	r19
  66:	4f 93       	push	r20
  68:	5f 93       	push	r21
  6a:	6f 93       	push	r22
  6c:	7f 93       	push	r23
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
	desired_value=ADCH<<2|ADCL>>6;
  7a:	85 b1       	in	r24, 0x05	; 5
  7c:	24 b1       	in	r18, 0x04	; 4
  7e:	22 95       	swap	r18
  80:	26 95       	lsr	r18
  82:	26 95       	lsr	r18
  84:	23 70       	andi	r18, 0x03	; 3
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	82 2b       	or	r24, r18
			desired_value=MAX_V*1024/50;
		}
		 ADMUX=(ADMUX&~(1<<MUX1))|1<<MUX0;break;
	}
	pid_control();*/
	if (desired_value*50/1024>MAX_V)
  92:	9c 01       	movw	r18, r24
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	28 0f       	add	r18, r24
  9e:	39 1f       	adc	r19, r25
  a0:	a9 01       	movw	r20, r18
  a2:	44 0f       	add	r20, r20
  a4:	55 1f       	adc	r21, r21
  a6:	44 0f       	add	r20, r20
  a8:	55 1f       	adc	r21, r21
  aa:	24 0f       	add	r18, r20
  ac:	35 1f       	adc	r19, r21
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	21 15       	cp	r18, r1
  b4:	30 44       	sbci	r19, 0x40	; 64
  b6:	28 f4       	brcc	.+10     	; 0xc2 <__stack+0x23>
    }
}

ISR(ADC_vect)
{
	desired_value=ADCH<<2|ADCL>>6;
  b8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  c0:	06 c0       	rjmp	.+12     	; 0xce <__stack+0x2f>
		 ADMUX=(ADMUX&~(1<<MUX1))|1<<MUX0;break;
	}
	pid_control();*/
	if (desired_value*50/1024>MAX_V)
	{
		desired_value=MAX_V*1024/50;
  c2:	83 e3       	ldi	r24, 0x33	; 51
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
	Duty=desired_value*256/1024;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
  d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Duty>
	set_duty();
  da:	ab df       	rcall	.-170    	; 0x32 <set_duty>
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
