
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060a  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  64:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_init>:
#define LEFT 0x2B
#define STOP 0x31

void USART_init(void)
{
	UBRRH=(uint8_t)(UBRR>>8);
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=(uint8_t)UBRR;
  6e:	83 e3       	ldi	r24, 0x33	; 51
  70:	89 b9       	out	0x09, r24	; 9
	UCSRC|=1<<UCSZ1|1<<UCSZ0|1<<URSEL;
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 68       	ori	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
	UCSRB|=1<<RXCIE|1<<RXEN;
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	80 69       	ori	r24, 0x90	; 144
  7c:	8a b9       	out	0x0a, r24	; 10
  7e:	08 95       	ret

00000080 <USART_RxByte>:
}

uint8_t USART_RxByte(void)
{
	while((UCSRA&(1<<RXC))==0);
  80:	5f 9b       	sbis	0x0b, 7	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_RxByte>
	return UDR;
  84:	8c b1       	in	r24, 0x0c	; 12
}
  86:	08 95       	ret

00000088 <__vector_13>:

ISR(USART_RXC_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	uint8_t address,data,check;
	address=USART_RxByte();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <USART_RxByte>
  b2:	d8 2f       	mov	r29, r24
	data=USART_RxByte();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <USART_RxByte>
  b8:	c8 2f       	mov	r28, r24
	check=USART_RxByte();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <USART_RxByte>
	if((check==address+data)&&(address=RADDR))
  be:	48 2f       	mov	r20, r24
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	2c 2f       	mov	r18, r28
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	2d 0f       	add	r18, r29
  c8:	31 1d       	adc	r19, r1
  ca:	42 17       	cp	r20, r18
  cc:	53 07       	cpc	r21, r19
  ce:	d1 f4       	brne	.+52     	; 0x104 <__vector_13+0x7c>
	{
		switch(data)
  d0:	c1 32       	cpi	r28, 0x21	; 33
  d2:	71 f0       	breq	.+28     	; 0xf0 <__vector_13+0x68>
  d4:	28 f4       	brcc	.+10     	; 0xe0 <__vector_13+0x58>
  d6:	c1 31       	cpi	r28, 0x11	; 17
  d8:	41 f0       	breq	.+16     	; 0xea <__vector_13+0x62>
  da:	cb 31       	cpi	r28, 0x1B	; 27
  dc:	61 f0       	breq	.+24     	; 0xf6 <__vector_13+0x6e>
  de:	12 c0       	rjmp	.+36     	; 0x104 <__vector_13+0x7c>
  e0:	cb 32       	cpi	r28, 0x2B	; 43
  e2:	61 f0       	breq	.+24     	; 0xfc <__vector_13+0x74>
  e4:	c1 33       	cpi	r28, 0x31	; 49
  e6:	69 f0       	breq	.+26     	; 0x102 <__vector_13+0x7a>
  e8:	0d c0       	rjmp	.+26     	; 0x104 <__vector_13+0x7c>
		{
			case FRONT: PORTB=0b00001001;break;
  ea:	89 e0       	ldi	r24, 0x09	; 9
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	0a c0       	rjmp	.+20     	; 0x104 <__vector_13+0x7c>
			case BACK: PORTB=0b00000110;break;
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	07 c0       	rjmp	.+14     	; 0x104 <__vector_13+0x7c>
			case RIGHT: PORTB=0b00001010;break;
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_13+0x7c>
			case LEFT: PORTB=0b00000101;break;
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	88 bb       	out	0x18, r24	; 24
 100:	01 c0       	rjmp	.+2      	; 0x104 <__vector_13+0x7c>
			case STOP: PORTB=0x00;break;
 102:	18 ba       	out	0x18, r1	; 24
		}
	}
	
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:

int main(void)
{
	DDRB=0x0F;
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	87 bb       	out	0x17, r24	; 23
	sei();
 12e:	78 94       	sei
	USART_init();
 130:	0e 94 36 00 	call	0x6c	; 0x6c <USART_init>
    /* Replace with your application code */
    while (1) 
    {
    }
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0xa>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
