
PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000693  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005dc  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000250  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <pid_control>:
}

void pid_control(void)
{
	uint16_t result;
	Motor.error=Speed-Motor.current_speed;
  7c:	e0 e6       	ldi	r30, 0x60	; 96
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	20 81       	ld	r18, Z
  82:	31 81       	ldd	r19, Z+1	; 0x01
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	82 1b       	sub	r24, r18
  8a:	93 0b       	sbc	r25, r19
  8c:	93 83       	std	Z+3, r25	; 0x03
  8e:	82 83       	std	Z+2, r24	; 0x02
	Motor.integral+=Motor.error;
  90:	26 81       	ldd	r18, Z+6	; 0x06
  92:	37 81       	ldd	r19, Z+7	; 0x07
  94:	28 0f       	add	r18, r24
  96:	39 1f       	adc	r19, r25
  98:	37 83       	std	Z+7, r19	; 0x07
  9a:	26 83       	std	Z+6, r18	; 0x06
	uint16_t current_speed, error, last_error, integral;
	}Motor;
	
void set_speed(uint16_t value)
{
	OCR0=255;
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	2c bf       	out	0x3c, r18	; 60
	Motor.error=Speed-Motor.current_speed;
	Motor.integral+=Motor.error;
	result=Kp*Motor.error+Ki*Motor.integral+Kd*(Motor.error-Motor.last_error);
	if(result>1024) result=1024;
	set_speed(result);
	Motor.last_error=Motor.error;
  a0:	95 83       	std	Z+5, r25	; 0x05
  a2:	84 83       	std	Z+4, r24	; 0x04
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
	TCCR0|=1<<WGM00|1<<WGM01|1<<COM01;
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	88 66       	ori	r24, 0x68	; 104
  aa:	83 bf       	out	0x33, r24	; 51
	ADMUX|=1<<REFS0;
  ac:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=1<<ADEN|1<<ADIE;
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	88 68       	ori	r24, 0x88	; 136
  b2:	86 b9       	out	0x06, r24	; 6
	Motor.last_error=0;Motor.integral=0;
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	15 82       	std	Z+5, r1	; 0x05
  ba:	14 82       	std	Z+4, r1	; 0x04
  bc:	17 82       	std	Z+7, r1	; 0x07
  be:	16 82       	std	Z+6, r1	; 0x06
	uint16_t current_speed, error, last_error, integral;
	}Motor;
	
void set_speed(uint16_t value)
{
	OCR0=255;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8c bf       	out	0x3c, r24	; 60
	TCCR0|=1<<WGM00|1<<WGM01|1<<COM01;
	ADMUX|=1<<REFS0;
	ADCSRA|=1<<ADEN|1<<ADIE;
	Motor.last_error=0;Motor.integral=0;
	set_speed(512);
	sei();
  c4:	78 94       	sei
	ADCSRA|=1<<ADSC;
  c6:	36 9a       	sbi	0x06, 6	; 6
    /* Replace with your application code */
    while (1) 
    {
    }
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x22>

000000ca <__vector_16>:
}

ISR(ADC_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	uint16_t result;
	result=ADCH<<8|ADCL;
  ec:	25 b1       	in	r18, 0x05	; 5
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
	Motor.current_speed=result;
  f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	pid_control();
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <pid_control>
	ADCSRA|=1<<ADSC;
 100:	36 9a       	sbi	0x06, 6	; 6
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
