
BuckBoost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040f  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038e  00000000  00000000  00000583  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d7  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000266  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
	OCR0A=duty;
}

int main(void)
{
	DDRB|=1<<PINB0;
  22:	b8 9a       	sbi	0x17, 0	; 23
	TCCR0A|=1<<COM0A1|1<<WGM00|1<<WGM01;
  24:	8f b5       	in	r24, 0x2f	; 47
  26:	83 68       	ori	r24, 0x83	; 131
  28:	8f bd       	out	0x2f, r24	; 47
	TCCR0B|=1<<CS00|1<<WGM02;
  2a:	83 b7       	in	r24, 0x33	; 51
  2c:	89 60       	ori	r24, 0x09	; 9
  2e:	83 bf       	out	0x33, r24	; 51
#include <avr/io.h>
#include <avr/interrupt.h>

void set_duty(uint8_t duty)
{
	OCR0A=duty;
  30:	16 be       	out	0x36, r1	; 54
{
	DDRB|=1<<PINB0;
	TCCR0A|=1<<COM0A1|1<<WGM00|1<<WGM01;
	TCCR0B|=1<<CS00|1<<WGM02;
	set_duty(0);
	ADMUX|=1<<ADLAR|1<<MUX0;
  32:	87 b1       	in	r24, 0x07	; 7
  34:	81 62       	ori	r24, 0x21	; 33
  36:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADEN|1<<ADIE|1<<ADPS2;
  38:	86 b1       	in	r24, 0x06	; 6
  3a:	8c 68       	ori	r24, 0x8C	; 140
  3c:	86 b9       	out	0x06, r24	; 6
	sei();
  3e:	78 94       	sei
	ADCSRA|=1<<ADSC;
  40:	36 9a       	sbi	0x06, 6	; 6
    /* Replace with your application code */
    while (1) 
    {
    }
  42:	ff cf       	rjmp	.-2      	; 0x42 <__SREG__+0x3>

00000044 <__vector_9>:
}

ISR(ADC_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
	uint16_t voltage;
	uint8_t duty;
	voltage=ADCH<<2|ADCL>>6;
  54:	85 b1       	in	r24, 0x05	; 5
  56:	24 b1       	in	r18, 0x04	; 4
  58:	22 95       	swap	r18
  5a:	26 95       	lsr	r18
  5c:	26 95       	lsr	r18
  5e:	23 70       	andi	r18, 0x03	; 3
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	82 2b       	or	r24, r18
#include <avr/io.h>
#include <avr/interrupt.h>

void set_duty(uint8_t duty)
{
	OCR0A=duty;
  6c:	86 bf       	out	0x36, r24	; 54
	voltage=ADCH<<2|ADCL>>6;
	duty=voltage;
	if (duty>255) duty=255;
	else if(duty<0) duty=0;
	set_duty(duty);
}
  6e:	9f 91       	pop	r25
  70:	8f 91       	pop	r24
  72:	2f 91       	pop	r18
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
